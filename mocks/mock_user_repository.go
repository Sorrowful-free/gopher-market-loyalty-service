// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/user_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/Sorrowful-free/gopher-market-loyalty-service/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CheckIfTokenIsValid mocks base method.
func (m *MockUserRepository) CheckIfTokenIsValid(token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfTokenIsValid", token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfTokenIsValid indicates an expected call of CheckIfTokenIsValid.
func (mr *MockUserRepositoryMockRecorder) CheckIfTokenIsValid(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfTokenIsValid", reflect.TypeOf((*MockUserRepository)(nil).CheckIfTokenIsValid), token)
}

// CheckIfUserExists mocks base method.
func (m *MockUserRepository) CheckIfUserExists(login string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfUserExists", login)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfUserExists indicates an expected call of CheckIfUserExists.
func (mr *MockUserRepositoryMockRecorder) CheckIfUserExists(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfUserExists", reflect.TypeOf((*MockUserRepository)(nil).CheckIfUserExists), login)
}

// Create mocks base method.
func (m *MockUserRepository) Create(login, password string) (models.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", login, password)
	ret0, _ := ret[0].(models.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), login, password)
}

// GetByID mocks base method.
func (m *MockUserRepository) GetByID(id int64) (models.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(models.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepository)(nil).GetByID), id)
}

// GetByLoginAndPassword mocks base method.
func (m *MockUserRepository) GetByLoginAndPassword(login, password string) (models.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLoginAndPassword", login, password)
	ret0, _ := ret[0].(models.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLoginAndPassword indicates an expected call of GetByLoginAndPassword.
func (mr *MockUserRepositoryMockRecorder) GetByLoginAndPassword(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLoginAndPassword", reflect.TypeOf((*MockUserRepository)(nil).GetByLoginAndPassword), login, password)
}
